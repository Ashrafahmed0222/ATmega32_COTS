
ATmega32_COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000278a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000278a  000027fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000025d4  00000000  00000000  00002854  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001212  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000062ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 83 13 	call	0x2706	; 0x2706 <main>
      7a:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e6       	ldi	r26, 0x62	; 98
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e6       	ldi	r24, 0x62	; 98
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"


void PORT_voidInit(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
     b44:	e7 e3       	ldi	r30, 0x37	; 55
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
     b4a:	e4 e3       	ldi	r30, 0x34	; 52
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     b50:	e1 e3       	ldi	r30, 0x31	; 49
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	10 82       	st	Z, r1



	PORTA = PORTA_INITIAL_VALUE;
     b56:	eb e3       	ldi	r30, 0x3B	; 59
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
     b5c:	e8 e3       	ldi	r30, 0x38	; 56
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
     b62:	e5 e3       	ldi	r30, 0x35	; 53
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
     b68:	e2 e3       	ldi	r30, 0x32	; 50
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	10 82       	st	Z, r1

}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enumSetPinDirection>:
#include "DIO_private.h"
#include "DIO_interface.h"
#include "DIO_config.h"


DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction ){
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	28 97       	sbiw	r28, 0x08	; 8
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
     b8c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <=  DIO_PORTD && Copy_u8PIN <= DIO_PIN7 )
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	08 f0       	brcs	.+2      	; 0xb9a <DIO_enumSetPinDirection+0x26>
     b98:	f1 c0       	rjmp	.+482    	; 0xd7c <DIO_enumSetPinDirection+0x208>
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <DIO_enumSetPinDirection+0x2e>
     ba0:	ed c0       	rjmp	.+474    	; 0xd7c <DIO_enumSetPinDirection+0x208>
	{


		if(Copy_u8Direction == DIO_PIN_OUTPUT)
     ba2:	8c 81       	ldd	r24, Y+4	; 0x04
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	09 f0       	breq	.+2      	; 0xbaa <DIO_enumSetPinDirection+0x36>
     ba8:	6f c0       	rjmp	.+222    	; 0xc88 <DIO_enumSetPinDirection+0x114>
		{
			switch(Copy_u8PORT)
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	38 87       	std	Y+8, r19	; 0x08
     bb2:	2f 83       	std	Y+7, r18	; 0x07
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	49 f1       	breq	.+82     	; 0xc10 <DIO_enumSetPinDirection+0x9c>
     bbe:	2f 81       	ldd	r18, Y+7	; 0x07
     bc0:	38 85       	ldd	r19, Y+8	; 0x08
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <DIO_enumSetPinDirection+0x5e>
     bc8:	8f 81       	ldd	r24, Y+7	; 0x07
     bca:	98 85       	ldd	r25, Y+8	; 0x08
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	61 f0       	breq	.+24     	; 0xbe8 <DIO_enumSetPinDirection+0x74>
     bd0:	d6 c0       	rjmp	.+428    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
     bd2:	2f 81       	ldd	r18, Y+7	; 0x07
     bd4:	38 85       	ldd	r19, Y+8	; 0x08
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	71 f1       	breq	.+92     	; 0xc38 <DIO_enumSetPinDirection+0xc4>
     bdc:	8f 81       	ldd	r24, Y+7	; 0x07
     bde:	98 85       	ldd	r25, Y+8	; 0x08
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	e9 f1       	breq	.+122    	; 0xc60 <DIO_enumSetPinDirection+0xec>
     be6:	cb c0       	rjmp	.+406    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
			{
				case DIO_PORTA: SET_BIT(DDRA, Copy_u8PIN); break;
     be8:	aa e3       	ldi	r26, 0x3A	; 58
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e3       	ldi	r30, 0x3A	; 58
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	48 2f       	mov	r20, r24
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_enumSetPinDirection+0x92>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_enumSetPinDirection+0x8e>
     c0a:	84 2b       	or	r24, r20
     c0c:	8c 93       	st	X, r24
     c0e:	b7 c0       	rjmp	.+366    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
				case DIO_PORTB: SET_BIT(DDRB, Copy_u8PIN); break;
     c10:	a7 e3       	ldi	r26, 0x37	; 55
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e7 e3       	ldi	r30, 0x37	; 55
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	48 2f       	mov	r20, r24
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	02 2e       	mov	r0, r18
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_enumSetPinDirection+0xba>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	0a 94       	dec	r0
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_enumSetPinDirection+0xb6>
     c32:	84 2b       	or	r24, r20
     c34:	8c 93       	st	X, r24
     c36:	a3 c0       	rjmp	.+326    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
				case DIO_PORTC: SET_BIT(DDRC, Copy_u8PIN); break;
     c38:	a4 e3       	ldi	r26, 0x34	; 52
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e4 e3       	ldi	r30, 0x34	; 52
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 2e       	mov	r0, r18
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_enumSetPinDirection+0xe2>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	0a 94       	dec	r0
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_enumSetPinDirection+0xde>
     c5a:	84 2b       	or	r24, r20
     c5c:	8c 93       	st	X, r24
     c5e:	8f c0       	rjmp	.+286    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
				case DIO_PORTD: SET_BIT(DDRD, Copy_u8PIN); break;
     c60:	a1 e3       	ldi	r26, 0x31	; 49
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e1 e3       	ldi	r30, 0x31	; 49
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_enumSetPinDirection+0x10a>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_enumSetPinDirection+0x106>
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	7b c0       	rjmp	.+246    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
			}


		}
		else if (Copy_u8Direction == DIO_PIN_INPUT)
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	88 23       	and	r24, r24
     c8c:	09 f0       	breq	.+2      	; 0xc90 <DIO_enumSetPinDirection+0x11c>
     c8e:	74 c0       	rjmp	.+232    	; 0xd78 <DIO_enumSetPinDirection+0x204>
		{
			switch(Copy_u8PORT)
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	3e 83       	std	Y+6, r19	; 0x06
     c98:	2d 83       	std	Y+5, r18	; 0x05
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	91 05       	cpc	r25, r1
     ca2:	59 f1       	breq	.+86     	; 0xcfa <DIO_enumSetPinDirection+0x186>
     ca4:	2d 81       	ldd	r18, Y+5	; 0x05
     ca6:	3e 81       	ldd	r19, Y+6	; 0x06
     ca8:	22 30       	cpi	r18, 0x02	; 2
     caa:	31 05       	cpc	r19, r1
     cac:	2c f4       	brge	.+10     	; 0xcb8 <DIO_enumSetPinDirection+0x144>
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	69 f0       	breq	.+26     	; 0xcd0 <DIO_enumSetPinDirection+0x15c>
     cb6:	63 c0       	rjmp	.+198    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
     cb8:	2d 81       	ldd	r18, Y+5	; 0x05
     cba:	3e 81       	ldd	r19, Y+6	; 0x06
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	89 f1       	breq	.+98     	; 0xd24 <DIO_enumSetPinDirection+0x1b0>
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <DIO_enumSetPinDirection+0x15a>
     ccc:	40 c0       	rjmp	.+128    	; 0xd4e <DIO_enumSetPinDirection+0x1da>
     cce:	57 c0       	rjmp	.+174    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
			{
				case DIO_PORTA: CLR_BIT(DDRA, Copy_u8PIN); break;
     cd0:	aa e3       	ldi	r26, 0x3A	; 58
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ea e3       	ldi	r30, 0x3A	; 58
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_enumSetPinDirection+0x17a>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_enumSetPinDirection+0x176>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	42 c0       	rjmp	.+132    	; 0xd7e <DIO_enumSetPinDirection+0x20a>
				case DIO_PORTB: CLR_BIT(DDRB, Copy_u8PIN); break;
     cfa:	a7 e3       	ldi	r26, 0x37	; 55
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e3       	ldi	r30, 0x37	; 55
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_enumSetPinDirection+0x1a4>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_enumSetPinDirection+0x1a0>
     d1c:	80 95       	com	r24
     d1e:	84 23       	and	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	2d c0       	rjmp	.+90     	; 0xd7e <DIO_enumSetPinDirection+0x20a>
				case DIO_PORTC: CLR_BIT(DDRC, Copy_u8PIN); break;
     d24:	a4 e3       	ldi	r26, 0x34	; 52
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e4 e3       	ldi	r30, 0x34	; 52
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_enumSetPinDirection+0x1ce>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_enumSetPinDirection+0x1ca>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	18 c0       	rjmp	.+48     	; 0xd7e <DIO_enumSetPinDirection+0x20a>
				case DIO_PORTD: CLR_BIT(DDRD, Copy_u8PIN); break;
     d4e:	a1 e3       	ldi	r26, 0x31	; 49
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e1 e3       	ldi	r30, 0x31	; 49
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_enumSetPinDirection+0x1f8>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_enumSetPinDirection+0x1f4>
     d70:	80 95       	com	r24
     d72:	84 23       	and	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <DIO_enumSetPinDirection+0x20a>
			}
		}
		else
		{
			LOC_enumState = DIO_NOK;
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <DIO_enumSetPinDirection+0x20a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     d7c:	19 82       	std	Y+1, r1	; 0x01
	}


	return LOC_enumState;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d80:	28 96       	adiw	r28, 0x08	; 8
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <DIO_enumSetPinValue>:


/*------------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus DIO_enumSetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value ){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	28 97       	sbiw	r28, 0x08	; 8
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	8a 83       	std	Y+2, r24	; 0x02
     da8:	6b 83       	std	Y+3, r22	; 0x03
     daa:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD && Copy_u8PIN <= DIO_PIN7)
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <DIO_enumSetPinValue+0x26>
     db6:	f1 c0       	rjmp	.+482    	; 0xf9a <DIO_enumSetPinValue+0x208>
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	88 30       	cpi	r24, 0x08	; 8
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <DIO_enumSetPinValue+0x2e>
     dbe:	ed c0       	rjmp	.+474    	; 0xf9a <DIO_enumSetPinValue+0x208>
	{
		if(Copy_u8Value == DIO_PIN_HIGH)
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <DIO_enumSetPinValue+0x36>
     dc6:	6f c0       	rjmp	.+222    	; 0xea6 <DIO_enumSetPinValue+0x114>
		{
			switch(Copy_u8PORT)
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	38 87       	std	Y+8, r19	; 0x08
     dd0:	2f 83       	std	Y+7, r18	; 0x07
     dd2:	8f 81       	ldd	r24, Y+7	; 0x07
     dd4:	98 85       	ldd	r25, Y+8	; 0x08
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	49 f1       	breq	.+82     	; 0xe2e <DIO_enumSetPinValue+0x9c>
     ddc:	2f 81       	ldd	r18, Y+7	; 0x07
     dde:	38 85       	ldd	r19, Y+8	; 0x08
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <DIO_enumSetPinValue+0x5e>
     de6:	8f 81       	ldd	r24, Y+7	; 0x07
     de8:	98 85       	ldd	r25, Y+8	; 0x08
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	61 f0       	breq	.+24     	; 0xe06 <DIO_enumSetPinValue+0x74>
     dee:	d6 c0       	rjmp	.+428    	; 0xf9c <DIO_enumSetPinValue+0x20a>
     df0:	2f 81       	ldd	r18, Y+7	; 0x07
     df2:	38 85       	ldd	r19, Y+8	; 0x08
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	71 f1       	breq	.+92     	; 0xe56 <DIO_enumSetPinValue+0xc4>
     dfa:	8f 81       	ldd	r24, Y+7	; 0x07
     dfc:	98 85       	ldd	r25, Y+8	; 0x08
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	91 05       	cpc	r25, r1
     e02:	e9 f1       	breq	.+122    	; 0xe7e <DIO_enumSetPinValue+0xec>
     e04:	cb c0       	rjmp	.+406    	; 0xf9c <DIO_enumSetPinValue+0x20a>
			{
				case DIO_PORTA: SET_BIT(PORTA, Copy_u8PIN); break;
     e06:	ab e3       	ldi	r26, 0x3B	; 59
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	eb e3       	ldi	r30, 0x3B	; 59
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_enumSetPinValue+0x92>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_enumSetPinValue+0x8e>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	b7 c0       	rjmp	.+366    	; 0xf9c <DIO_enumSetPinValue+0x20a>
				case DIO_PORTB: SET_BIT(PORTB, Copy_u8PIN); break;
     e2e:	a8 e3       	ldi	r26, 0x38	; 56
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e3       	ldi	r30, 0x38	; 56
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_enumSetPinValue+0xba>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_enumSetPinValue+0xb6>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	a3 c0       	rjmp	.+326    	; 0xf9c <DIO_enumSetPinValue+0x20a>
				case DIO_PORTC: SET_BIT(PORTC, Copy_u8PIN); break;
     e56:	a5 e3       	ldi	r26, 0x35	; 53
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e5 e3       	ldi	r30, 0x35	; 53
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_enumSetPinValue+0xe2>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_enumSetPinValue+0xde>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	8f c0       	rjmp	.+286    	; 0xf9c <DIO_enumSetPinValue+0x20a>
				case DIO_PORTD: SET_BIT(PORTD, Copy_u8PIN); break;
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_enumSetPinValue+0x10a>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_enumSetPinValue+0x106>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	7b c0       	rjmp	.+246    	; 0xf9c <DIO_enumSetPinValue+0x20a>
			}


		}
		else if (Copy_u8Value == DIO_PIN_LOW)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	88 23       	and	r24, r24
     eaa:	09 f0       	breq	.+2      	; 0xeae <DIO_enumSetPinValue+0x11c>
     eac:	74 c0       	rjmp	.+232    	; 0xf96 <DIO_enumSetPinValue+0x204>
		{
			switch(Copy_u8PORT)
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3e 83       	std	Y+6, r19	; 0x06
     eb6:	2d 83       	std	Y+5, r18	; 0x05
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	59 f1       	breq	.+86     	; 0xf18 <DIO_enumSetPinValue+0x186>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_enumSetPinValue+0x144>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	69 f0       	breq	.+26     	; 0xeee <DIO_enumSetPinValue+0x15c>
     ed4:	63 c0       	rjmp	.+198    	; 0xf9c <DIO_enumSetPinValue+0x20a>
     ed6:	2d 81       	ldd	r18, Y+5	; 0x05
     ed8:	3e 81       	ldd	r19, Y+6	; 0x06
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	89 f1       	breq	.+98     	; 0xf42 <DIO_enumSetPinValue+0x1b0>
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <DIO_enumSetPinValue+0x15a>
     eea:	40 c0       	rjmp	.+128    	; 0xf6c <DIO_enumSetPinValue+0x1da>
     eec:	57 c0       	rjmp	.+174    	; 0xf9c <DIO_enumSetPinValue+0x20a>
			{
				case DIO_PORTA: CLR_BIT(PORTA, Copy_u8PIN); break;
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_enumSetPinValue+0x17a>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_enumSetPinValue+0x176>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	42 c0       	rjmp	.+132    	; 0xf9c <DIO_enumSetPinValue+0x20a>
				case DIO_PORTB: CLR_BIT(PORTB, Copy_u8PIN); break;
     f18:	a8 e3       	ldi	r26, 0x38	; 56
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e8 e3       	ldi	r30, 0x38	; 56
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_enumSetPinValue+0x1a4>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_enumSetPinValue+0x1a0>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	2d c0       	rjmp	.+90     	; 0xf9c <DIO_enumSetPinValue+0x20a>
				case DIO_PORTC: CLR_BIT(PORTC, Copy_u8PIN); break;
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_enumSetPinValue+0x1ce>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_enumSetPinValue+0x1ca>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	18 c0       	rjmp	.+48     	; 0xf9c <DIO_enumSetPinValue+0x20a>
				case DIO_PORTD: CLR_BIT(PORTD, Copy_u8PIN); break;
     f6c:	a2 e3       	ldi	r26, 0x32	; 50
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e2 e3       	ldi	r30, 0x32	; 50
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_enumSetPinValue+0x1f8>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_enumSetPinValue+0x1f4>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <DIO_enumSetPinValue+0x20a>
			}
		}
		else
		{
			LOC_enumState = DIO_NOK;
     f96:	19 82       	std	Y+1, r1	; 0x01
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <DIO_enumSetPinValue+0x20a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     f9a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9e:	28 96       	adiw	r28, 0x08	; 8
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <DIO_enumGetPinValue>:

/*--------------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus DIO_enumGetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_PtrData ){
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	27 97       	sbiw	r28, 0x07	; 7
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	6b 83       	std	Y+3, r22	; 0x03
     fc8:	5d 83       	std	Y+5, r21	; 0x05
     fca:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD && Copy_u8PIN <= DIO_PIN7)
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <DIO_enumGetPinValue+0x28>
     fd6:	75 c0       	rjmp	.+234    	; 0x10c2 <DIO_enumGetPinValue+0x112>
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <DIO_enumGetPinValue+0x30>
     fde:	71 c0       	rjmp	.+226    	; 0x10c2 <DIO_enumGetPinValue+0x112>
	{

		switch(Copy_u8PORT)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3f 83       	std	Y+7, r19	; 0x07
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	4e 81       	ldd	r20, Y+6	; 0x06
     fec:	5f 81       	ldd	r21, Y+7	; 0x07
     fee:	41 30       	cpi	r20, 0x01	; 1
     ff0:	51 05       	cpc	r21, r1
     ff2:	59 f1       	breq	.+86     	; 0x104a <DIO_enumGetPinValue+0x9a>
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	91 05       	cpc	r25, r1
     ffc:	34 f4       	brge	.+12     	; 0x100a <DIO_enumGetPinValue+0x5a>
     ffe:	2e 81       	ldd	r18, Y+6	; 0x06
    1000:	3f 81       	ldd	r19, Y+7	; 0x07
    1002:	21 15       	cp	r18, r1
    1004:	31 05       	cpc	r19, r1
    1006:	69 f0       	breq	.+26     	; 0x1022 <DIO_enumGetPinValue+0x72>
    1008:	5d c0       	rjmp	.+186    	; 0x10c4 <DIO_enumGetPinValue+0x114>
    100a:	4e 81       	ldd	r20, Y+6	; 0x06
    100c:	5f 81       	ldd	r21, Y+7	; 0x07
    100e:	42 30       	cpi	r20, 0x02	; 2
    1010:	51 05       	cpc	r21, r1
    1012:	79 f1       	breq	.+94     	; 0x1072 <DIO_enumGetPinValue+0xc2>
    1014:	8e 81       	ldd	r24, Y+6	; 0x06
    1016:	9f 81       	ldd	r25, Y+7	; 0x07
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_enumGetPinValue+0x70>
    101e:	3d c0       	rjmp	.+122    	; 0x109a <DIO_enumGetPinValue+0xea>
    1020:	51 c0       	rjmp	.+162    	; 0x10c4 <DIO_enumGetPinValue+0x114>
			{
				case DIO_PORTA: *Copy_PtrData = GET_BIT(PINA, Copy_u8PIN); break;
    1022:	e9 e3       	ldi	r30, 0x39	; 57
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_enumGetPinValue+0x8a>
    1036:	55 95       	asr	r21
    1038:	47 95       	ror	r20
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_enumGetPinValue+0x86>
    103e:	ca 01       	movw	r24, r20
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	ec 81       	ldd	r30, Y+4	; 0x04
    1044:	fd 81       	ldd	r31, Y+5	; 0x05
    1046:	80 83       	st	Z, r24
    1048:	3d c0       	rjmp	.+122    	; 0x10c4 <DIO_enumGetPinValue+0x114>
				case DIO_PORTB: *Copy_PtrData = GET_BIT(PINB, Copy_u8PIN); break;
    104a:	e6 e3       	ldi	r30, 0x36	; 54
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a9 01       	movw	r20, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_enumGetPinValue+0xb2>
    105e:	55 95       	asr	r21
    1060:	47 95       	ror	r20
    1062:	8a 95       	dec	r24
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_enumGetPinValue+0xae>
    1066:	ca 01       	movw	r24, r20
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	ec 81       	ldd	r30, Y+4	; 0x04
    106c:	fd 81       	ldd	r31, Y+5	; 0x05
    106e:	80 83       	st	Z, r24
    1070:	29 c0       	rjmp	.+82     	; 0x10c4 <DIO_enumGetPinValue+0x114>
				case DIO_PORTC: *Copy_PtrData = GET_BIT(PINC, Copy_u8PIN); break;
    1072:	e3 e3       	ldi	r30, 0x33	; 51
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_enumGetPinValue+0xda>
    1086:	55 95       	asr	r21
    1088:	47 95       	ror	r20
    108a:	8a 95       	dec	r24
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_enumGetPinValue+0xd6>
    108e:	ca 01       	movw	r24, r20
    1090:	81 70       	andi	r24, 0x01	; 1
    1092:	ec 81       	ldd	r30, Y+4	; 0x04
    1094:	fd 81       	ldd	r31, Y+5	; 0x05
    1096:	80 83       	st	Z, r24
    1098:	15 c0       	rjmp	.+42     	; 0x10c4 <DIO_enumGetPinValue+0x114>
				case DIO_PORTD: *Copy_PtrData = GET_BIT(PIND, Copy_u8PIN); break;
    109a:	e0 e3       	ldi	r30, 0x30	; 48
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_enumGetPinValue+0x102>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_enumGetPinValue+0xfe>
    10b6:	ca 01       	movw	r24, r20
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	ec 81       	ldd	r30, Y+4	; 0x04
    10bc:	fd 81       	ldd	r31, Y+5	; 0x05
    10be:	80 83       	st	Z, r24
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <DIO_enumGetPinValue+0x114>
			}

	}
	else
	{
		LOC_enumState = DIO_NOK;
    10c2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	27 96       	adiw	r28, 0x07	; 7
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <DIO_enumTogglePinValue>:

/*-----------------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus DIO_enumTogglePinValue  (u8 Copy_u8PORT, u8 Copy_u8PIN                      )
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_enumTogglePinValue+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_enumTogglePinValue+0x8>
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	8a 83       	std	Y+2, r24	; 0x02
    10e8:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PORT <= DIO_PORTD)
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <DIO_enumTogglePinValue+0x1e>
    10f4:	6f c0       	rjmp	.+222    	; 0x11d4 <DIO_enumTogglePinValue+0xfc>
	{
		switch(Copy_u8PORT)
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3d 83       	std	Y+5, r19	; 0x05
    10fe:	2c 83       	std	Y+4, r18	; 0x04
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	49 f1       	breq	.+82     	; 0x115c <DIO_enumTogglePinValue+0x84>
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	2c f4       	brge	.+10     	; 0x111e <DIO_enumTogglePinValue+0x46>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	61 f0       	breq	.+24     	; 0x1134 <DIO_enumTogglePinValue+0x5c>
    111c:	5c c0       	rjmp	.+184    	; 0x11d6 <DIO_enumTogglePinValue+0xfe>
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	71 f1       	breq	.+92     	; 0x1184 <DIO_enumTogglePinValue+0xac>
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	9d 81       	ldd	r25, Y+5	; 0x05
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	91 05       	cpc	r25, r1
    1130:	e9 f1       	breq	.+122    	; 0x11ac <DIO_enumTogglePinValue+0xd4>
    1132:	51 c0       	rjmp	.+162    	; 0x11d6 <DIO_enumTogglePinValue+0xfe>
			{
				case DIO_PORTA: TOG_BIT(PORTA, Copy_u8PIN); break;
    1134:	ab e3       	ldi	r26, 0x3B	; 59
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	eb e3       	ldi	r30, 0x3B	; 59
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_enumTogglePinValue+0x7a>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_enumTogglePinValue+0x76>
    1156:	84 27       	eor	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	3d c0       	rjmp	.+122    	; 0x11d6 <DIO_enumTogglePinValue+0xfe>
				case DIO_PORTB: TOG_BIT(PORTB, Copy_u8PIN); break;
    115c:	a8 e3       	ldi	r26, 0x38	; 56
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_enumTogglePinValue+0xa2>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_enumTogglePinValue+0x9e>
    117e:	84 27       	eor	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	29 c0       	rjmp	.+82     	; 0x11d6 <DIO_enumTogglePinValue+0xfe>
				case DIO_PORTC: TOG_BIT(PORTC, Copy_u8PIN); break;
    1184:	a5 e3       	ldi	r26, 0x35	; 53
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e3       	ldi	r30, 0x35	; 53
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enumTogglePinValue+0xca>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enumTogglePinValue+0xc6>
    11a6:	84 27       	eor	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <DIO_enumTogglePinValue+0xfe>
				case DIO_PORTD: TOG_BIT(PORTD, Copy_u8PIN); break;
    11ac:	a2 e3       	ldi	r26, 0x32	; 50
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_enumTogglePinValue+0xf2>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_enumTogglePinValue+0xee>
    11ce:	84 27       	eor	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <DIO_enumTogglePinValue+0xfe>
			}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    11d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <DIO_enumSetPortDirection>:

/*--------------------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus DIO_enumSetPortDirection (u8 Copy_u8PORT, u8 Copy_u8Direction )
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_enumSetPortDirection+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_enumSetPortDirection+0x8>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    11f8:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	a8 f5       	brcc	.+106    	; 0x126e <DIO_enumSetPortDirection+0x86>
	{


			switch(Copy_u8PORT)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3d 83       	std	Y+5, r19	; 0x05
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	d1 f0       	breq	.+52     	; 0x124c <DIO_enumSetPortDirection+0x64>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <DIO_enumSetPortDirection+0x44>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 f0       	breq	.+24     	; 0x1242 <DIO_enumSetPortDirection+0x5a>
    122a:	1f c0       	rjmp	.+62     	; 0x126a <DIO_enumSetPortDirection+0x82>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	81 f0       	breq	.+32     	; 0x1256 <DIO_enumSetPortDirection+0x6e>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <DIO_enumSetPortDirection+0x78>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <DIO_enumSetPortDirection+0x82>
			{
				case DIO_PORTA: DDRA = Copy_u8Direction;break;
    1242:	ea e3       	ldi	r30, 0x3A	; 58
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	80 83       	st	Z, r24
    124a:	12 c0       	rjmp	.+36     	; 0x1270 <DIO_enumSetPortDirection+0x88>


				case DIO_PORTB: DDRB = Copy_u8Direction;break;
    124c:	e7 e3       	ldi	r30, 0x37	; 55
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	80 83       	st	Z, r24
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <DIO_enumSetPortDirection+0x88>


				case DIO_PORTC: DDRC = Copy_u8Direction;break;
    1256:	e4 e3       	ldi	r30, 0x34	; 52
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	80 83       	st	Z, r24
    125e:	08 c0       	rjmp	.+16     	; 0x1270 <DIO_enumSetPortDirection+0x88>


				case DIO_PORTD: DDRD = Copy_u8Direction;break;
    1260:	e1 e3       	ldi	r30, 0x31	; 49
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	80 83       	st	Z, r24
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <DIO_enumSetPortDirection+0x88>


				default :       LOC_enumState = DIO_NOK    ;break;
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <DIO_enumSetPortDirection+0x88>
			}

	}
		else
		{
			LOC_enumState = DIO_NOK;
    126e:	19 82       	std	Y+1, r1	; 0x01
		}

	return LOC_enumState;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_enumSetPortValue>:


/*------------------------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus DIO_enumSetPortValue     (u8 Copy_u8PORT, u8 Copy_u8Value     ){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_enumSetPortValue+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_enumSetPortValue+0x8>
    128a:	0f 92       	push	r0
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	a8 f5       	brcc	.+106    	; 0x1308 <DIO_enumSetPortValue+0x86>
	{


			switch(Copy_u8PORT)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <DIO_enumSetPortValue+0x64>
    12b2:	2c 81       	ldd	r18, Y+4	; 0x04
    12b4:	3d 81       	ldd	r19, Y+5	; 0x05
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_enumSetPortValue+0x44>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_enumSetPortValue+0x5a>
    12c4:	1f c0       	rjmp	.+62     	; 0x1304 <DIO_enumSetPortValue+0x82>
    12c6:	2c 81       	ldd	r18, Y+4	; 0x04
    12c8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_enumSetPortValue+0x6e>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <DIO_enumSetPortValue+0x78>
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <DIO_enumSetPortValue+0x82>
			{
				case DIO_PORTA: PORTA = Copy_u8Value;break;
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	80 83       	st	Z, r24
    12e4:	12 c0       	rjmp	.+36     	; 0x130a <DIO_enumSetPortValue+0x88>


				case DIO_PORTB: PORTB = Copy_u8Value;break;
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	80 83       	st	Z, r24
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <DIO_enumSetPortValue+0x88>


				case DIO_PORTC: PORTC = Copy_u8Value;break;
    12f0:	e5 e3       	ldi	r30, 0x35	; 53
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	80 83       	st	Z, r24
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <DIO_enumSetPortValue+0x88>


				case DIO_PORTD: PORTD = Copy_u8Value;break;
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	80 83       	st	Z, r24
    1302:	03 c0       	rjmp	.+6      	; 0x130a <DIO_enumSetPortValue+0x88>


				default :       LOC_enumState = DIO_NOK    ;break;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	01 c0       	rjmp	.+2      	; 0x130a <DIO_enumSetPortValue+0x88>
			}

	}
		else
		{
			LOC_enumState = DIO_NOK;
    1308:	19 82       	std	Y+1, r1	; 0x01
		}

	return LOC_enumState;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_enumGetPortValue>:



/*------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus   DIO_enumGetPortValue         (u8 Copy_u8PORT , u8 *Copy_PortPtrData                   )
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_enumGetPortValue+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_enumGetPortValue+0x8>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_enumGetPortValue+0xa>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	7c 83       	std	Y+4, r23	; 0x04
    132e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT <= DIO_PORTD)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	e8 f5       	brcc	.+122    	; 0x13b4 <DIO_enumGetPortValue+0x98>
	{
		switch(Copy_u8PORT)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3e 83       	std	Y+6, r19	; 0x06
    1342:	2d 83       	std	Y+5, r18	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	e1 f0       	breq	.+56     	; 0x1386 <DIO_enumGetPortValue+0x6a>
    134e:	2d 81       	ldd	r18, Y+5	; 0x05
    1350:	3e 81       	ldd	r19, Y+6	; 0x06
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <DIO_enumGetPortValue+0x46>
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 f0       	breq	.+24     	; 0x1378 <DIO_enumGetPortValue+0x5c>
    1360:	27 c0       	rjmp	.+78     	; 0x13b0 <DIO_enumGetPortValue+0x94>
    1362:	2d 81       	ldd	r18, Y+5	; 0x05
    1364:	3e 81       	ldd	r19, Y+6	; 0x06
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	a1 f0       	breq	.+40     	; 0x1394 <DIO_enumGetPortValue+0x78>
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	b1 f0       	breq	.+44     	; 0x13a2 <DIO_enumGetPortValue+0x86>
    1376:	1c c0       	rjmp	.+56     	; 0x13b0 <DIO_enumGetPortValue+0x94>
			{
				case DIO_PORTA: *Copy_PortPtrData = PINA;break;
    1378:	e9 e3       	ldi	r30, 0x39	; 57
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	eb 81       	ldd	r30, Y+3	; 0x03
    1380:	fc 81       	ldd	r31, Y+4	; 0x04
    1382:	80 83       	st	Z, r24
    1384:	18 c0       	rjmp	.+48     	; 0x13b6 <DIO_enumGetPortValue+0x9a>


				case DIO_PORTB: *Copy_PortPtrData = PINB;break;
    1386:	e6 e3       	ldi	r30, 0x36	; 54
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	80 83       	st	Z, r24
    1392:	11 c0       	rjmp	.+34     	; 0x13b6 <DIO_enumGetPortValue+0x9a>


				case DIO_PORTC: *Copy_PortPtrData = PINC;break;
    1394:	e3 e3       	ldi	r30, 0x33	; 51
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	80 83       	st	Z, r24
    13a0:	0a c0       	rjmp	.+20     	; 0x13b6 <DIO_enumGetPortValue+0x9a>

				case DIO_PORTD: *Copy_PortPtrData = PIND;break;
    13a2:	e0 e3       	ldi	r30, 0x30	; 48
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	eb 81       	ldd	r30, Y+3	; 0x03
    13aa:	fc 81       	ldd	r31, Y+4	; 0x04
    13ac:	80 83       	st	Z, r24
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <DIO_enumGetPortValue+0x9a>
				default :       LOC_enumState = DIO_NOK       ;break;
    13b0:	19 82       	std	Y+1, r1	; 0x01
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <DIO_enumGetPortValue+0x9a>

			}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    13b4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b8:	26 96       	adiw	r28, 0x06	; 6
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_enumTogglePortValue>:




/*--------------------------------------------------------------------------------------------------------------------------*/
DIO_ErrorStatus DIO_enumTogglePortValue  (u8 Copy_u8PORT                     ){
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <DIO_enumTogglePortValue+0x6>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <DIO_enumTogglePortValue+0x8>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8PORT <= DIO_PORTD)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <DIO_enumTogglePortValue+0x1a>
    13e2:	41 c0       	rjmp	.+130    	; 0x1466 <DIO_enumTogglePortValue+0x9c>
		{


				switch(Copy_u8PORT)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3c 83       	std	Y+4, r19	; 0x04
    13ec:	2b 83       	std	Y+3, r18	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	e9 f0       	breq	.+58     	; 0x1432 <DIO_enumTogglePortValue+0x68>
    13f8:	2b 81       	ldd	r18, Y+3	; 0x03
    13fa:	3c 81       	ldd	r19, Y+4	; 0x04
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <DIO_enumTogglePortValue+0x42>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	61 f0       	breq	.+24     	; 0x1422 <DIO_enumTogglePortValue+0x58>
    140a:	2b c0       	rjmp	.+86     	; 0x1462 <DIO_enumTogglePortValue+0x98>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f0       	breq	.+44     	; 0x1442 <DIO_enumTogglePortValue+0x78>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	c9 f0       	breq	.+50     	; 0x1452 <DIO_enumTogglePortValue+0x88>
    1420:	20 c0       	rjmp	.+64     	; 0x1462 <DIO_enumTogglePortValue+0x98>
				{
					case DIO_PORTA: PORTA = ~PORTA;break;
    1422:	ab e3       	ldi	r26, 0x3B	; 59
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	eb e3       	ldi	r30, 0x3B	; 59
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	80 95       	com	r24
    142e:	8c 93       	st	X, r24
    1430:	1b c0       	rjmp	.+54     	; 0x1468 <DIO_enumTogglePortValue+0x9e>


					case DIO_PORTB: PORTB = ~PORTB;break;
    1432:	a8 e3       	ldi	r26, 0x38	; 56
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e8 e3       	ldi	r30, 0x38	; 56
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 95       	com	r24
    143e:	8c 93       	st	X, r24
    1440:	13 c0       	rjmp	.+38     	; 0x1468 <DIO_enumTogglePortValue+0x9e>


					case DIO_PORTC: PORTC = ~PORTC;break;
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 95       	com	r24
    144e:	8c 93       	st	X, r24
    1450:	0b c0       	rjmp	.+22     	; 0x1468 <DIO_enumTogglePortValue+0x9e>


					case DIO_PORTD: PORTD = ~PORTD;break;
    1452:	a2 e3       	ldi	r26, 0x32	; 50
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e2 e3       	ldi	r30, 0x32	; 50
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 95       	com	r24
    145e:	8c 93       	st	X, r24
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <DIO_enumTogglePortValue+0x9e>


					default :       LOC_enumState = DIO_NOK    ;break;
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <DIO_enumTogglePortValue+0x9e>
				}

		}
			else
			{
				LOC_enumState = DIO_NOK;
    1466:	19 82       	std	Y+1, r1	; 0x01
			}

		return LOC_enumState;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <SW_voidInitial>:
#include "../../MCAL/DIO_Driver/DIO_private.h"


#include "SW_interface.h"

void SW_voidInitial(SW_TYPE SW_CONF) {
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <SW_voidInitial+0x6>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	69 83       	std	Y+1, r22	; 0x01
    1486:	7a 83       	std	Y+2, r23	; 0x02
    1488:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(SW_CONF.Port, SW_CONF.Pin, DIO_PIN_INPUT);
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	69 2f       	mov	r22, r25
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
	if (SW_CONF.Pull_State == SW_INT_PULL_UP) {
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	88 23       	and	r24, r24
    149a:	31 f4       	brne	.+12     	; 0x14a8 <SW_voidInitial+0x30>
		DIO_enumSetPinValue(SW_CONF.Port, SW_CONF.Pin, DIO_PIN_HIGH);
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	69 2f       	mov	r22, r25
    14a2:	41 e0       	ldi	r20, 0x01	; 1
    14a4:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	}

}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <SW_u8getPressed>:

u8 SW_u8getPressed(SW_TYPE SW_CONF) {
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	28 97       	sbiw	r28, 0x08	; 8
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	69 83       	std	Y+1, r22	; 0x01
    14ca:	7a 83       	std	Y+2, r23	; 0x02
    14cc:	8b 83       	std	Y+3, r24	; 0x03
	if (SW_CONF.Pull_State == SW_EXT_PULL_UP
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	21 f0       	breq	.+8      	; 0x14dc <SW_u8getPressed+0x28>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	88 23       	and	r24, r24
    14d8:	09 f0       	breq	.+2      	; 0x14dc <SW_u8getPressed+0x28>
    14da:	83 c0       	rjmp	.+262    	; 0x15e2 <SW_u8getPressed+0x12e>
			|| SW_CONF.Pull_State == SW_INT_PULL_UP) {
		switch (SW_CONF.Port) {
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	38 87       	std	Y+8, r19	; 0x08
    14e4:	2f 83       	std	Y+7, r18	; 0x07
    14e6:	4f 81       	ldd	r20, Y+7	; 0x07
    14e8:	58 85       	ldd	r21, Y+8	; 0x08
    14ea:	41 30       	cpi	r20, 0x01	; 1
    14ec:	51 05       	cpc	r21, r1
    14ee:	79 f1       	breq	.+94     	; 0x154e <SW_u8getPressed+0x9a>
    14f0:	8f 81       	ldd	r24, Y+7	; 0x07
    14f2:	98 85       	ldd	r25, Y+8	; 0x08
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <SW_u8getPressed+0x52>
    14fa:	2f 81       	ldd	r18, Y+7	; 0x07
    14fc:	38 85       	ldd	r19, Y+8	; 0x08
    14fe:	21 15       	cp	r18, r1
    1500:	31 05       	cpc	r19, r1
    1502:	69 f0       	breq	.+26     	; 0x151e <SW_u8getPressed+0x6a>
    1504:	6c c0       	rjmp	.+216    	; 0x15de <SW_u8getPressed+0x12a>
    1506:	4f 81       	ldd	r20, Y+7	; 0x07
    1508:	58 85       	ldd	r21, Y+8	; 0x08
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	51 05       	cpc	r21, r1
    150e:	b9 f1       	breq	.+110    	; 0x157e <SW_u8getPressed+0xca>
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <SW_u8getPressed+0x68>
    151a:	49 c0       	rjmp	.+146    	; 0x15ae <SW_u8getPressed+0xfa>
    151c:	60 c0       	rjmp	.+192    	; 0x15de <SW_u8getPressed+0x12a>

		case DIO_PORTA:
			if (GET_BIT(PINA,SW_CONF.Pin) == DIO_PIN_LOW) {
    151e:	e9 e3       	ldi	r30, 0x39	; 57
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a9 01       	movw	r20, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <SW_u8getPressed+0x82>
    1532:	55 95       	asr	r21
    1534:	47 95       	ror	r20
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <SW_u8getPressed+0x7e>
    153a:	ca 01       	movw	r24, r20
    153c:	81 70       	andi	r24, 0x01	; 1
    153e:	90 70       	andi	r25, 0x00	; 0
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	19 f4       	brne	.+6      	; 0x154a <SW_u8getPressed+0x96>
				return SW_PRESSED;
    1544:	51 e0       	ldi	r21, 0x01	; 1
    1546:	5e 83       	std	Y+6, r21	; 0x06
    1548:	d4 c0       	rjmp	.+424    	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    154a:	1e 82       	std	Y+6, r1	; 0x06
    154c:	d2 c0       	rjmp	.+420    	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		case DIO_PORTB:
			if (GET_BIT(PINB,SW_CONF.Pin) == DIO_PIN_LOW) {
    154e:	e6 e3       	ldi	r30, 0x36	; 54
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <SW_u8getPressed+0xb2>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <SW_u8getPressed+0xae>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	90 70       	andi	r25, 0x00	; 0
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	19 f4       	brne	.+6      	; 0x157a <SW_u8getPressed+0xc6>
				return SW_PRESSED;
    1574:	51 e0       	ldi	r21, 0x01	; 1
    1576:	5e 83       	std	Y+6, r21	; 0x06
    1578:	bc c0       	rjmp	.+376    	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    157a:	1e 82       	std	Y+6, r1	; 0x06
    157c:	ba c0       	rjmp	.+372    	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		case DIO_PORTC:
			if (GET_BIT(PINC,SW_CONF.Pin) == DIO_PIN_LOW) {
    157e:	e3 e3       	ldi	r30, 0x33	; 51
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a9 01       	movw	r20, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <SW_u8getPressed+0xe2>
    1592:	55 95       	asr	r21
    1594:	47 95       	ror	r20
    1596:	8a 95       	dec	r24
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <SW_u8getPressed+0xde>
    159a:	ca 01       	movw	r24, r20
    159c:	81 70       	andi	r24, 0x01	; 1
    159e:	90 70       	andi	r25, 0x00	; 0
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	19 f4       	brne	.+6      	; 0x15aa <SW_u8getPressed+0xf6>
				return SW_PRESSED;
    15a4:	51 e0       	ldi	r21, 0x01	; 1
    15a6:	5e 83       	std	Y+6, r21	; 0x06
    15a8:	a4 c0       	rjmp	.+328    	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    15aa:	1e 82       	std	Y+6, r1	; 0x06
    15ac:	a2 c0       	rjmp	.+324    	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		case DIO_PORTD:
			if (GET_BIT(PIND,SW_CONF.Pin) == DIO_PIN_LOW) {
    15ae:	e0 e3       	ldi	r30, 0x30	; 48
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a9 01       	movw	r20, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <SW_u8getPressed+0x112>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <SW_u8getPressed+0x10e>
    15ca:	ca 01       	movw	r24, r20
    15cc:	81 70       	andi	r24, 0x01	; 1
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	19 f4       	brne	.+6      	; 0x15da <SW_u8getPressed+0x126>
				return SW_PRESSED;
    15d4:	51 e0       	ldi	r21, 0x01	; 1
    15d6:	5e 83       	std	Y+6, r21	; 0x06
    15d8:	8c c0       	rjmp	.+280    	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    15da:	1e 82       	std	Y+6, r1	; 0x06
    15dc:	8a c0       	rjmp	.+276    	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		default:
			return SW_NOT_PRESSED;
    15de:	1e 82       	std	Y+6, r1	; 0x06
    15e0:	88 c0       	rjmp	.+272    	; 0x16f2 <SW_u8getPressed+0x23e>
		}
	} else if (SW_CONF.Pull_State == SW_EXT_PULL_DOWN) {
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	09 f0       	breq	.+2      	; 0x15ea <SW_u8getPressed+0x136>
    15e8:	83 c0       	rjmp	.+262    	; 0x16f0 <SW_u8getPressed+0x23c>
		switch (SW_CONF.Port) {
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3d 83       	std	Y+5, r19	; 0x05
    15f2:	2c 83       	std	Y+4, r18	; 0x04
    15f4:	4c 81       	ldd	r20, Y+4	; 0x04
    15f6:	5d 81       	ldd	r21, Y+5	; 0x05
    15f8:	41 30       	cpi	r20, 0x01	; 1
    15fa:	51 05       	cpc	r21, r1
    15fc:	79 f1       	breq	.+94     	; 0x165c <SW_u8getPressed+0x1a8>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	91 05       	cpc	r25, r1
    1606:	34 f4       	brge	.+12     	; 0x1614 <SW_u8getPressed+0x160>
    1608:	2c 81       	ldd	r18, Y+4	; 0x04
    160a:	3d 81       	ldd	r19, Y+5	; 0x05
    160c:	21 15       	cp	r18, r1
    160e:	31 05       	cpc	r19, r1
    1610:	69 f0       	breq	.+26     	; 0x162c <SW_u8getPressed+0x178>
    1612:	6c c0       	rjmp	.+216    	; 0x16ec <SW_u8getPressed+0x238>
    1614:	4c 81       	ldd	r20, Y+4	; 0x04
    1616:	5d 81       	ldd	r21, Y+5	; 0x05
    1618:	42 30       	cpi	r20, 0x02	; 2
    161a:	51 05       	cpc	r21, r1
    161c:	b9 f1       	breq	.+110    	; 0x168c <SW_u8getPressed+0x1d8>
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <SW_u8getPressed+0x176>
    1628:	49 c0       	rjmp	.+146    	; 0x16bc <SW_u8getPressed+0x208>
    162a:	60 c0       	rjmp	.+192    	; 0x16ec <SW_u8getPressed+0x238>

		case DIO_PORTA:
			if (GET_BIT(PINA,SW_CONF.Pin) == DIO_PIN_HIGH) {
    162c:	e9 e3       	ldi	r30, 0x39	; 57
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <SW_u8getPressed+0x190>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <SW_u8getPressed+0x18c>
    1648:	ca 01       	movw	r24, r20
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	90 70       	andi	r25, 0x00	; 0
    164e:	88 23       	and	r24, r24
    1650:	19 f0       	breq	.+6      	; 0x1658 <SW_u8getPressed+0x1a4>
				return SW_PRESSED;
    1652:	51 e0       	ldi	r21, 0x01	; 1
    1654:	5e 83       	std	Y+6, r21	; 0x06
    1656:	4d c0       	rjmp	.+154    	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    1658:	1e 82       	std	Y+6, r1	; 0x06
    165a:	4b c0       	rjmp	.+150    	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		case DIO_PORTB:
			if (GET_BIT(PINB,SW_CONF.Pin) == DIO_PIN_HIGH) {
    165c:	e6 e3       	ldi	r30, 0x36	; 54
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <SW_u8getPressed+0x1c0>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <SW_u8getPressed+0x1bc>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	90 70       	andi	r25, 0x00	; 0
    167e:	88 23       	and	r24, r24
    1680:	19 f0       	breq	.+6      	; 0x1688 <SW_u8getPressed+0x1d4>
				return SW_PRESSED;
    1682:	51 e0       	ldi	r21, 0x01	; 1
    1684:	5e 83       	std	Y+6, r21	; 0x06
    1686:	35 c0       	rjmp	.+106    	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    1688:	1e 82       	std	Y+6, r1	; 0x06
    168a:	33 c0       	rjmp	.+102    	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		case DIO_PORTC:
			if (GET_BIT(PINC,SW_CONF.Pin) == DIO_PIN_HIGH) {
    168c:	e3 e3       	ldi	r30, 0x33	; 51
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <SW_u8getPressed+0x1f0>
    16a0:	55 95       	asr	r21
    16a2:	47 95       	ror	r20
    16a4:	8a 95       	dec	r24
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <SW_u8getPressed+0x1ec>
    16a8:	ca 01       	movw	r24, r20
    16aa:	81 70       	andi	r24, 0x01	; 1
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	88 23       	and	r24, r24
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <SW_u8getPressed+0x204>
				return SW_PRESSED;
    16b2:	51 e0       	ldi	r21, 0x01	; 1
    16b4:	5e 83       	std	Y+6, r21	; 0x06
    16b6:	1d c0       	rjmp	.+58     	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    16b8:	1e 82       	std	Y+6, r1	; 0x06
    16ba:	1b c0       	rjmp	.+54     	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		case DIO_PORTD:
			if (GET_BIT(PIND,SW_CONF.Pin) == DIO_PIN_HIGH) {
    16bc:	e0 e3       	ldi	r30, 0x30	; 48
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <SW_u8getPressed+0x220>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <SW_u8getPressed+0x21c>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	90 70       	andi	r25, 0x00	; 0
    16de:	88 23       	and	r24, r24
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <SW_u8getPressed+0x234>
				return SW_PRESSED;
    16e2:	51 e0       	ldi	r21, 0x01	; 1
    16e4:	5e 83       	std	Y+6, r21	; 0x06
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <SW_u8getPressed+0x23e>
			} else {
				return SW_NOT_PRESSED;
    16e8:	1e 82       	std	Y+6, r1	; 0x06
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <SW_u8getPressed+0x23e>
			}
			break;
		default:
			return SW_NOT_PRESSED;
    16ec:	1e 82       	std	Y+6, r1	; 0x06
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <SW_u8getPressed+0x23e>
		}
	} else
		return SW_NOT_PRESSED;
    16f0:	1e 82       	std	Y+6, r1	; 0x06
    16f2:	8e 81       	ldd	r24, Y+6	; 0x06

}
    16f4:	28 96       	adiw	r28, 0x08	; 8
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <SW_voidEnableIternalPullUp>:

void SW_voidEnableIternalPullUp(SW_TYPE SW_CONF) {
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <SW_voidEnableIternalPullUp+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <SW_voidEnableIternalPullUp+0x8>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	69 83       	std	Y+1, r22	; 0x01
    1716:	7a 83       	std	Y+2, r23	; 0x02
    1718:	8b 83       	std	Y+3, r24	; 0x03
	switch (SW_CONF.Port) {
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3d 83       	std	Y+5, r19	; 0x05
    1722:	2c 83       	std	Y+4, r18	; 0x04
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	91 05       	cpc	r25, r1
    172c:	f1 f0       	breq	.+60     	; 0x176a <SW_voidEnableIternalPullUp+0x64>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	2c f4       	brge	.+10     	; 0x1742 <SW_voidEnableIternalPullUp+0x3c>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	61 f0       	breq	.+24     	; 0x1758 <SW_voidEnableIternalPullUp+0x52>
    1740:	2e c0       	rjmp	.+92     	; 0x179e <SW_voidEnableIternalPullUp+0x98>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	c1 f0       	breq	.+48     	; 0x177c <SW_voidEnableIternalPullUp+0x76>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	91 05       	cpc	r25, r1
    1754:	e1 f0       	breq	.+56     	; 0x178e <SW_voidEnableIternalPullUp+0x88>
    1756:	23 c0       	rjmp	.+70     	; 0x179e <SW_voidEnableIternalPullUp+0x98>
	case DIO_PORTA:
		DIO_enumSetPinValue(PORTA, SW_CONF.Pin, DIO_PIN_HIGH);
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	69 2f       	mov	r22, r25
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    1768:	1a c0       	rjmp	.+52     	; 0x179e <SW_voidEnableIternalPullUp+0x98>
		break;
	case DIO_PORTB:
		DIO_enumSetPinValue(PORTB, SW_CONF.Pin, DIO_PIN_HIGH);
    176a:	e8 e3       	ldi	r30, 0x38	; 56
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	69 2f       	mov	r22, r25
    1774:	41 e0       	ldi	r20, 0x01	; 1
    1776:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    177a:	11 c0       	rjmp	.+34     	; 0x179e <SW_voidEnableIternalPullUp+0x98>
		break;
	case DIO_PORTC:
		DIO_enumSetPinValue(PORTC, SW_CONF.Pin, DIO_PIN_HIGH);
    177c:	e5 e3       	ldi	r30, 0x35	; 53
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	69 2f       	mov	r22, r25
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    178c:	08 c0       	rjmp	.+16     	; 0x179e <SW_voidEnableIternalPullUp+0x98>
		break;
	case DIO_PORTD:
		DIO_enumSetPinValue(PORTD, SW_CONF.Pin, DIO_PIN_HIGH);
    178e:	e2 e3       	ldi	r30, 0x32	; 50
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	69 2f       	mov	r22, r25
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
		break;
	default:break;

	}

}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <SW_voidDisableIternalPullUp>:

void SW_voidDisableIternalPullUp(SW_TYPE SW_CONF) {
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <SW_voidDisableIternalPullUp+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <SW_voidDisableIternalPullUp+0x8>
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	69 83       	std	Y+1, r22	; 0x01
    17be:	7a 83       	std	Y+2, r23	; 0x02
    17c0:	8b 83       	std	Y+3, r24	; 0x03
	switch (SW_CONF.Port) {
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3d 83       	std	Y+5, r19	; 0x05
    17ca:	2c 83       	std	Y+4, r18	; 0x04
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	f1 f0       	breq	.+60     	; 0x1812 <SW_voidDisableIternalPullUp+0x64>
    17d6:	2c 81       	ldd	r18, Y+4	; 0x04
    17d8:	3d 81       	ldd	r19, Y+5	; 0x05
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	2c f4       	brge	.+10     	; 0x17ea <SW_voidDisableIternalPullUp+0x3c>
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	9d 81       	ldd	r25, Y+5	; 0x05
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	61 f0       	breq	.+24     	; 0x1800 <SW_voidDisableIternalPullUp+0x52>
    17e8:	2e c0       	rjmp	.+92     	; 0x1846 <SW_voidDisableIternalPullUp+0x98>
    17ea:	2c 81       	ldd	r18, Y+4	; 0x04
    17ec:	3d 81       	ldd	r19, Y+5	; 0x05
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	c1 f0       	breq	.+48     	; 0x1824 <SW_voidDisableIternalPullUp+0x76>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	e1 f0       	breq	.+56     	; 0x1836 <SW_voidDisableIternalPullUp+0x88>
    17fe:	23 c0       	rjmp	.+70     	; 0x1846 <SW_voidDisableIternalPullUp+0x98>
		case DIO_PORTA:
			DIO_enumSetPinValue(PORTA, SW_CONF.Pin, DIO_PIN_LOW);
    1800:	eb e3       	ldi	r30, 0x3B	; 59
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	69 2f       	mov	r22, r25
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    1810:	1a c0       	rjmp	.+52     	; 0x1846 <SW_voidDisableIternalPullUp+0x98>
			break;
		case DIO_PORTB:
			DIO_enumSetPinValue(PORTB, SW_CONF.Pin, DIO_PIN_LOW);
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	69 2f       	mov	r22, r25
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    1822:	11 c0       	rjmp	.+34     	; 0x1846 <SW_voidDisableIternalPullUp+0x98>
			break;
		case DIO_PORTC:
			DIO_enumSetPinValue(PORTC, SW_CONF.Pin, DIO_PIN_LOW);
    1824:	e5 e3       	ldi	r30, 0x35	; 53
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	69 2f       	mov	r22, r25
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    1834:	08 c0       	rjmp	.+16     	; 0x1846 <SW_voidDisableIternalPullUp+0x98>
			break;
		case DIO_PORTD:
			DIO_enumSetPinValue(PORTD, SW_CONF.Pin, DIO_PIN_LOW);
    1836:	e2 e3       	ldi	r30, 0x32	; 50
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	69 2f       	mov	r22, r25
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
			break;
		default:break;

		}
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <SSD_voidInitialDataPort>:



static u8 Local_u8SSD_Numbers[10] = SSD_NUMBER_ARR;

void SSD_voidInitialDataPort (SSD_CONFIG Copy_structConfig){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <SSD_voidInitialDataPort+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <SSD_voidInitialDataPort+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	69 83       	std	Y+1, r22	; 0x01
    1864:	7a 83       	std	Y+2, r23	; 0x02
    1866:	8b 83       	std	Y+3, r24	; 0x03
    1868:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection(Copy_structConfig.DATA_PORT, 0xFF);
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	6f ef       	ldi	r22, 0xFF	; 255
    186e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enumSetPortDirection>
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <SSD_voidSendNumber>:

/*-----------------------------------------------------------------------*/

void SSD_voidSendNumber      (SSD_CONFIG Copy_structConfig, u8 Copy_u8Number){
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <SSD_voidSendNumber+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <SSD_voidSendNumber+0x8>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	69 83       	std	Y+1, r22	; 0x01
    1890:	7a 83       	std	Y+2, r23	; 0x02
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	4d 83       	std	Y+5, r20	; 0x05
	if(Copy_structConfig.TYPE == COMMON_CATHODE)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 23       	and	r24, r24
    189c:	69 f4       	brne	.+26     	; 0x18b8 <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(Copy_structConfig.DATA_PORT , Local_u8SSD_Numbers[Copy_u8Number]);
    189e:	2a 81       	ldd	r18, Y+2	; 0x02
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	e6 59       	subi	r30, 0x96	; 150
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	90 81       	ld	r25, Z
    18ae:	82 2f       	mov	r24, r18
    18b0:	69 2f       	mov	r22, r25
    18b2:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_enumSetPortValue>
    18b6:	11 c0       	rjmp	.+34     	; 0x18da <SSD_voidSendNumber+0x5a>
	}
	else if(Copy_structConfig.TYPE == COMMON_ANODE)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	71 f4       	brne	.+28     	; 0x18da <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(Copy_structConfig.DATA_PORT , ~(Local_u8SSD_Numbers[Copy_u8Number]));
    18be:	2a 81       	ldd	r18, Y+2	; 0x02
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	fc 01       	movw	r30, r24
    18c8:	e6 59       	subi	r30, 0x96	; 150
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	98 2f       	mov	r25, r24
    18d0:	90 95       	com	r25
    18d2:	82 2f       	mov	r24, r18
    18d4:	69 2f       	mov	r22, r25
    18d6:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_enumSetPortValue>
	}
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <SSD_voidEnable>:

/*-------------------------------------------------------------------------*/


void SSD_voidEnable          (SSD_CONFIG Copy_structConfig){
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <SSD_voidEnable+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <SSD_voidEnable+0x8>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	69 83       	std	Y+1, r22	; 0x01
    18f8:	7a 83       	std	Y+2, r23	; 0x02
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	9c 83       	std	Y+4, r25	; 0x04
	if(Copy_structConfig.TYPE == COMMON_CATHODE)
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	88 23       	and	r24, r24
    1902:	69 f4       	brne	.+26     	; 0x191e <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinDirection(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN, DIO_PIN_OUTPUT);
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	69 2f       	mov	r22, r25
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN,DIO_PIN_LOW);
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	69 2f       	mov	r22, r25
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    191c:	0f c0       	rjmp	.+30     	; 0x193c <SSD_voidEnable+0x52>
	}
	else if(Copy_structConfig.TYPE == COMMON_ANODE)
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	61 f4       	brne	.+24     	; 0x193c <SSD_voidEnable+0x52>
	{
		DIO_enumSetPinDirection(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN, DIO_PIN_OUTPUT);
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	69 2f       	mov	r22, r25
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN,DIO_PIN_HIGH);
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	69 2f       	mov	r22, r25
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	}
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <SSD_voidDisable>:


/*------------------------------------------------------------------------*/

void SSD_voidDisable          (SSD_CONFIG Copy_structConfig){
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <SSD_voidDisable+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <SSD_voidDisable+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	69 83       	std	Y+1, r22	; 0x01
    1958:	7a 83       	std	Y+2, r23	; 0x02
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	9c 83       	std	Y+4, r25	; 0x04
	if(Copy_structConfig.TYPE == COMMON_CATHODE)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	88 23       	and	r24, r24
    1962:	69 f4       	brne	.+26     	; 0x197e <SSD_voidDisable+0x34>
	{
			DIO_enumSetPinDirection(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN, DIO_PIN_OUTPUT);
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	69 2f       	mov	r22, r25
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
			DIO_enumSetPinValue(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN,DIO_PIN_HIGH);
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	69 2f       	mov	r22, r25
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    197c:	0f c0       	rjmp	.+30     	; 0x199c <SSD_voidDisable+0x52>
	}
	else if(Copy_structConfig.TYPE == COMMON_ANODE)
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	61 f4       	brne	.+24     	; 0x199c <SSD_voidDisable+0x52>
	{
			DIO_enumSetPinDirection(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN, DIO_PIN_OUTPUT);
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	69 2f       	mov	r22, r25
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
			DIO_enumSetPinValue(Copy_structConfig.DATA_PORT,Copy_structConfig.ENABLE_PIN,DIO_PIN_LOW);
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	69 2f       	mov	r22, r25
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	}
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <LED_voidInIt>:
#include "LED_interface.h"


/*Initializing the LED*/
void LED_voidInIt  (LED_CONF LED_CONFIGRATION)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <LED_voidInIt+0x6>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	69 83       	std	Y+1, r22	; 0x01
    19b8:	7a 83       	std	Y+2, r23	; 0x02
    19ba:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_CONFIGRATION.Port, LED_CONFIGRATION.Pin, DIO_PIN_OUTPUT);
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	69 2f       	mov	r22, r25
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <LED_voidON>:

/*-------------------------------------------------------------------------------------*/


void LED_voidON    (LED_CONF LED_CONFIGRATION)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <LED_voidON+0x6>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	69 83       	std	Y+1, r22	; 0x01
    19e2:	7a 83       	std	Y+2, r23	; 0x02
    19e4:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_CONFIGRATION.Active_State == ACTIVE_HIGH)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	39 f4       	brne	.+14     	; 0x19fa <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_CONFIGRATION.Port, LED_CONFIGRATION.Pin, LED_PIN_HIGH);
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	69 2f       	mov	r22, r25
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <LED_voidON+0x38>
	}
	else if(LED_CONFIGRATION.Active_State == ACTIVE_LOW)
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	88 23       	and	r24, r24
    19fe:	31 f4       	brne	.+12     	; 0x1a0c <LED_voidON+0x38>
	{
		DIO_enumSetPinValue(LED_CONFIGRATION.Port, LED_CONFIGRATION.Pin, LED_PIN_LOW);
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	69 2f       	mov	r22, r25
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	}
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LED_voidOFF>:

/*-------------------------------------------------------------------------------------------*/


void LED_voidOFF   (LED_CONF LED_CONFIGRATION)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <LED_voidOFF+0x6>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	69 83       	std	Y+1, r22	; 0x01
    1a26:	7a 83       	std	Y+2, r23	; 0x02
    1a28:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_CONFIGRATION.Active_State == ACTIVE_HIGH)
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	39 f4       	brne	.+14     	; 0x1a3e <LED_voidOFF+0x26>
		{
			DIO_enumSetPinValue(LED_CONFIGRATION.Port, LED_CONFIGRATION.Pin, LED_PIN_LOW);
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	69 2f       	mov	r22, r25
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    1a3c:	09 c0       	rjmp	.+18     	; 0x1a50 <LED_voidOFF+0x38>
		}
		else if(LED_CONFIGRATION.Active_State == ACTIVE_LOW)
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 23       	and	r24, r24
    1a42:	31 f4       	brne	.+12     	; 0x1a50 <LED_voidOFF+0x38>
		{
			DIO_enumSetPinValue(LED_CONFIGRATION.Port, LED_CONFIGRATION.Pin, LED_PIN_HIGH);
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	69 2f       	mov	r22, r25
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
		}
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <LED_voidToggle>:
/*------------------------------------------------------------------------------------------*/



void LED_voidToggle(LED_CONF LED_CONFIGRATION)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <LED_voidToggle+0x6>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	69 83       	std	Y+1, r22	; 0x01
    1a6a:	7a 83       	std	Y+2, r23	; 0x02
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_CONFIGRATION.Port, LED_CONFIGRATION.Pin);
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	69 2f       	mov	r22, r25
    1a74:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_enumTogglePinValue>
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_config.h"
#include "CLCD_private.h"
#include "CLCD_externalChars.h"

void CLCD_voidInit(void) {
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	c6 54       	subi	r28, 0x46	; 70
    1a92:	d0 40       	sbci	r29, 0x00	; 0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ed 5b       	subi	r30, 0xBD	; 189
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a8 e4       	ldi	r26, 0x48	; 72
    1aaa:	b2 e4       	ldi	r27, 0x42	; 66
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	a2 83       	std	Z+2, r26	; 0x02
    1ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	01 5c       	subi	r16, 0xC1	; 193
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 5b       	subi	r30, 0xBD	; 189
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 83       	st	Z, r24
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	a2 83       	std	Z+2, r26	; 0x02
    1ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ff 96       	adiw	r30, 0x3f	; 63
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <CLCD_voidInit+0x84>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9e af       	std	Y+62, r25	; 0x3e
    1b04:	8d af       	std	Y+61, r24	; 0x3d
    1b06:	46 c0       	rjmp	.+140    	; 0x1b94 <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ff 96       	adiw	r30, 0x3f	; 63
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	64 f5       	brge	.+88     	; 0x1b7c <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 5b       	subi	r30, 0xBD	; 189
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e af       	std	Y+62, r25	; 0x3e
    1b50:	8d af       	std	Y+61, r24	; 0x3d
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <CLCD_voidInit+0xee>
    1b54:	88 ec       	ldi	r24, 0xC8	; 200
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c af       	std	Y+60, r25	; 0x3c
    1b5a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <CLCD_voidInit+0xdc>
    1b64:	9c af       	std	Y+60, r25	; 0x3c
    1b66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9e af       	std	Y+62, r25	; 0x3e
    1b70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <CLCD_voidInit+0xd0>
    1b7a:	16 c0       	rjmp	.+44     	; 0x1ba8 <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ff 96       	adiw	r30, 0x3f	; 63
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e af       	std	Y+62, r25	; 0x3e
    1b92:	8d af       	std	Y+61, r24	; 0x3d
    1b94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b98:	9a af       	std	Y+58, r25	; 0x3a
    1b9a:	89 af       	std	Y+57, r24	; 0x39
    1b9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <CLCD_voidInit+0x11c>
    1ba4:	9a af       	std	Y+58, r25	; 0x3a
    1ba6:	89 af       	std	Y+57, r24	; 0x39
#if CLCD_MODE == 8
	_delay_ms(50);

	DIO_enumSetPortDirection(CLCD_PORT, OUTPUT_PORT);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	6f ef       	ldi	r22, 0xFF	; 255
    1bac:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enumSetPortDirection>
	DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumSetPinDirection>

	CLCD_voidSendCommand(lcd_Home);
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	8d ab       	std	Y+53, r24	; 0x35
    1bde:	9e ab       	std	Y+54, r25	; 0x36
    1be0:	af ab       	std	Y+55, r26	; 0x37
    1be2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	6d a9       	ldd	r22, Y+53	; 0x35
    1be6:	7e a9       	ldd	r23, Y+54	; 0x36
    1be8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bea:	98 ad       	ldd	r25, Y+56	; 0x38
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a ef       	ldi	r20, 0xFA	; 250
    1bf2:	54 e4       	ldi	r21, 0x44	; 68
    1bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	89 ab       	std	Y+49, r24	; 0x31
    1bfe:	9a ab       	std	Y+50, r25	; 0x32
    1c00:	ab ab       	std	Y+51, r26	; 0x33
    1c02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <CLCD_voidInit+0x1a2>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	98 ab       	std	Y+48, r25	; 0x30
    1c22:	8f a7       	std	Y+47, r24	; 0x2f
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    1c26:	69 a9       	ldd	r22, Y+49	; 0x31
    1c28:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c40:	7e a9       	ldd	r23, Y+54	; 0x36
    1c42:	8f a9       	ldd	r24, Y+55	; 0x37
    1c44:	98 ad       	ldd	r25, Y+56	; 0x38
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	98 ab       	std	Y+48, r25	; 0x30
    1c64:	8f a7       	std	Y+47, r24	; 0x2f
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <CLCD_voidInit+0x202>
    1c68:	88 ec       	ldi	r24, 0xC8	; 200
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9e a7       	std	Y+46, r25	; 0x2e
    1c6e:	8d a7       	std	Y+45, r24	; 0x2d
    1c70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <CLCD_voidInit+0x1f0>
    1c78:	9e a7       	std	Y+46, r25	; 0x2e
    1c7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	98 ab       	std	Y+48, r25	; 0x30
    1c84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c88:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <CLCD_voidInit+0x1e4>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	69 a9       	ldd	r22, Y+49	; 0x31
    1c92:	7a a9       	ldd	r23, Y+50	; 0x32
    1c94:	8b a9       	ldd	r24, Y+51	; 0x33
    1c96:	9c a9       	ldd	r25, Y+52	; 0x34
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	98 ab       	std	Y+48, r25	; 0x30
    1ca2:	8f a7       	std	Y+47, r24	; 0x2f
    1ca4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca8:	9c a7       	std	Y+44, r25	; 0x2c
    1caa:	8b a7       	std	Y+43, r24	; 0x2b
    1cac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <CLCD_voidInit+0x22c>
    1cb4:	9c a7       	std	Y+44, r25	; 0x2c
    1cb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	CLCD_voidSendCommand(EIGHT_BITS);
    1cb8:	88 e3       	ldi	r24, 0x38	; 56
    1cba:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	8f a3       	std	Y+39, r24	; 0x27
    1cc8:	98 a7       	std	Y+40, r25	; 0x28
    1cca:	a9 a7       	std	Y+41, r26	; 0x29
    1ccc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8b a3       	std	Y+35, r24	; 0x23
    1ce8:	9c a3       	std	Y+36, r25	; 0x24
    1cea:	ad a3       	std	Y+37, r26	; 0x25
    1cec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <CLCD_voidInit+0x28c>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    1d10:	6b a1       	ldd	r22, Y+35	; 0x23
    1d12:	7c a1       	ldd	r23, Y+36	; 0x24
    1d14:	8d a1       	ldd	r24, Y+37	; 0x25
    1d16:	9e a1       	ldd	r25, Y+38	; 0x26
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9a a3       	std	Y+34, r25	; 0x22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <CLCD_voidInit+0x2ec>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	98 a3       	std	Y+32, r25	; 0x20
    1d58:	8f 8f       	std	Y+31, r24	; 0x1f
    1d5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <CLCD_voidInit+0x2da>
    1d62:	98 a3       	std	Y+32, r25	; 0x20
    1d64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	89 a1       	ldd	r24, Y+33	; 0x21
    1d68:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9a a3       	std	Y+34, r25	; 0x22
    1d6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	89 a1       	ldd	r24, Y+33	; 0x21
    1d72:	9a a1       	ldd	r25, Y+34	; 0x22
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <CLCD_voidInit+0x2ce>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d80:	9e a1       	ldd	r25, Y+38	; 0x26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9a a3       	std	Y+34, r25	; 0x22
    1d8c:	89 a3       	std	Y+33, r24	; 0x21
    1d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d90:	9a a1       	ldd	r25, Y+34	; 0x22
    1d92:	9e 8f       	std	Y+30, r25	; 0x1e
    1d94:	8d 8f       	std	Y+29, r24	; 0x1d
    1d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <CLCD_voidInit+0x316>
    1d9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1da0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(lcd_DispalyOn_CursorOff);
    1da2:	8c e0       	ldi	r24, 0x0C	; 12
    1da4:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	89 8f       	std	Y+25, r24	; 0x19
    1db2:	9a 8f       	std	Y+26, r25	; 0x1a
    1db4:	ab 8f       	std	Y+27, r26	; 0x1b
    1db6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8d 8b       	std	Y+21, r24	; 0x15
    1dd2:	9e 8b       	std	Y+22, r25	; 0x16
    1dd4:	af 8b       	std	Y+23, r26	; 0x17
    1dd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dda:	7e 89       	ldd	r23, Y+22	; 0x16
    1ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dde:	98 8d       	ldd	r25, Y+24	; 0x18
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <CLCD_voidInit+0x376>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    1dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1e00:	98 8d       	ldd	r25, Y+24	; 0x18
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <CLCD_voidInit+0x3d6>
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9a 8b       	std	Y+18, r25	; 0x12
    1e42:	89 8b       	std	Y+17, r24	; 0x11
    1e44:	89 89       	ldd	r24, Y+17	; 0x11
    1e46:	9a 89       	ldd	r25, Y+18	; 0x12
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <CLCD_voidInit+0x3c4>
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <CLCD_voidInit+0x3b8>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6d 89       	ldd	r22, Y+21	; 0x15
    1e66:	7e 89       	ldd	r23, Y+22	; 0x16
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	98 8b       	std	Y+16, r25	; 0x10
    1e7e:	8f 87       	std	Y+15, r24	; 0x0f
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	98 89       	ldd	r25, Y+16	; 0x10
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <CLCD_voidInit+0x400>
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidClearScreen();
    1e8c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <CLCD_voidClearScreen>

	CLCD_voidSendCommand(lcd_EntryMode);
    1e90:	86 e0       	ldi	r24, 0x06	; 6
    1e92:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 e8       	ldi	r26, 0x80	; 128
    1e9c:	bf e3       	ldi	r27, 0x3F	; 63
    1e9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ea0:	9c 87       	std	Y+12, r25	; 0x0c
    1ea2:	ad 87       	std	Y+13, r26	; 0x0d
    1ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a ef       	ldi	r20, 0xFA	; 250
    1eb4:	54 e4       	ldi	r21, 0x44	; 68
    1eb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8f 83       	std	Y+7, r24	; 0x07
    1ec0:	98 87       	std	Y+8, r25	; 0x08
    1ec2:	a9 87       	std	Y+9, r26	; 0x09
    1ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <CLCD_voidInit+0x464>
		__ticks = 1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	4c f5       	brge	.+82     	; 0x1f52 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <CLCD_voidInit+0x4c4>
    1f2a:	88 ec       	ldi	r24, 0xC8	; 200
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <CLCD_voidInit+0x4b2>
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <CLCD_voidInit+0x4a6>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <CLCD_voidInit+0x4ee>
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#elif CLCD_MODE == 4
#endif

}
    1f7a:	ca 5b       	subi	r28, 0xBA	; 186
    1f7c:	df 4f       	sbci	r29, 0xFF	; 255
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret

00001f92 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 copy_u8Data) {
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	8f 87       	std	Y+15, r24	; 0x0f
#if CLCD_MODE == 8
	DIO_enumSetPortValue(CLCD_PORT, copy_u8Data);
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fac:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_enumSetPortValue>
	DIO_enumSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    1fc4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <CLCD_voidSendFallingEdge>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e8       	ldi	r26, 0x80	; 128
    1fce:	bf e3       	ldi	r27, 0x3F	; 63
    1fd0:	8b 87       	std	Y+11, r24	; 0x0b
    1fd2:	9c 87       	std	Y+12, r25	; 0x0c
    1fd4:	ad 87       	std	Y+13, r26	; 0x0d
    1fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8f 83       	std	Y+7, r24	; 0x07
    1ff2:	98 87       	std	Y+8, r25	; 0x08
    1ff4:	a9 87       	std	Y+9, r26	; 0x09
    1ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <CLCD_voidSendData+0x88>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	0f c0       	rjmp	.+30     	; 0x207a <CLCD_voidSendData+0xe8>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <CLCD_voidSendData+0xd6>
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <CLCD_voidSendData+0xca>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <CLCD_voidSendData+0x112>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
#elif CLCD_MODE == 4

#endif
	_delay_ms(1);

}
    20ac:	2f 96       	adiw	r28, 0x0f	; 15
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command) {
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	2f 97       	sbiw	r28, 0x0f	; 15
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	8f 87       	std	Y+15, r24	; 0x0f
#if CLCD_MODE == 8
	DIO_enumSetPortValue(CLCD_PORT, Copy_u8Command);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    20d8:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_enumSetPortValue>
	DIO_enumSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    20f0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <CLCD_voidSendFallingEdge>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	8b 87       	std	Y+11, r24	; 0x0b
    20fe:	9c 87       	std	Y+12, r25	; 0x0c
    2100:	ad 87       	std	Y+13, r26	; 0x0d
    2102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 83       	std	Y+7, r24	; 0x07
    211e:	98 87       	std	Y+8, r25	; 0x08
    2120:	a9 87       	std	Y+9, r26	; 0x09
    2122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    2146:	6f 81       	ldd	r22, Y+7	; 0x07
    2148:	78 85       	ldd	r23, Y+8	; 0x08
    214a:	89 85       	ldd	r24, Y+9	; 0x09
    214c:	9a 85       	ldd	r25, Y+10	; 0x0a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2160:	7c 85       	ldd	r23, Y+12	; 0x0c
    2162:	8d 85       	ldd	r24, Y+13	; 0x0d
    2164:	9e 85       	ldd	r25, Y+14	; 0x0e
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <CLCD_voidSendCommand+0xe8>
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <CLCD_voidSendCommand+0xd6>
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <CLCD_voidSendCommand+0xca>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <CLCD_voidSendCommand+0x112>
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
#elif CLCD_MODE == 4

#endif
	_delay_ms(1);

}
    21d8:	2f 96       	adiw	r28, 0x0f	; 15
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <CLCD_voidSendFallingEdge>:

void CLCD_voidSendFallingEdge() {
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	6c 97       	sbiw	r28, 0x1c	; 28
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	62 e0       	ldi	r22, 0x02	; 2
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e8       	ldi	r26, 0x80	; 128
    220e:	bf e3       	ldi	r27, 0x3F	; 63
    2210:	89 8f       	std	Y+25, r24	; 0x19
    2212:	9a 8f       	std	Y+26, r25	; 0x1a
    2214:	ab 8f       	std	Y+27, r26	; 0x1b
    2216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a ef       	ldi	r20, 0xFA	; 250
    2226:	54 e4       	ldi	r21, 0x44	; 68
    2228:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8d 8b       	std	Y+21, r24	; 0x15
    2232:	9e 8b       	std	Y+22, r25	; 0x16
    2234:	af 8b       	std	Y+23, r26	; 0x17
    2236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	69 8d       	ldd	r22, Y+25	; 0x19
    2274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <CLCD_voidSendFallingEdge+0xd0>
    229c:	88 ec       	ldi	r24, 0xC8	; 200
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9a 8b       	std	Y+18, r25	; 0x12
    22a2:	89 8b       	std	Y+17, r24	; 0x11
    22a4:	89 89       	ldd	r24, Y+17	; 0x11
    22a6:	9a 89       	ldd	r25, Y+18	; 0x12
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <CLCD_voidSendFallingEdge+0xbe>
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9c 8b       	std	Y+20, r25	; 0x14
    22b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <CLCD_voidSendFallingEdge+0xb2>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6d 89       	ldd	r22, Y+21	; 0x15
    22c6:	7e 89       	ldd	r23, Y+22	; 0x16
    22c8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ca:	98 8d       	ldd	r25, Y+24	; 0x18
    22cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9c 8b       	std	Y+20, r25	; 0x14
    22d6:	8b 8b       	std	Y+19, r24	; 0x13
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	98 8b       	std	Y+16, r25	; 0x10
    22de:	8f 87       	std	Y+15, r24	; 0x0f
    22e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e2:	98 89       	ldd	r25, Y+16	; 0x10
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <CLCD_voidSendFallingEdge+0xfa>
    22e8:	98 8b       	std	Y+16, r25	; 0x10
    22ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 c9 06 	call	0xd92	; 0xd92 <DIO_enumSetPinValue>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e8       	ldi	r26, 0x80	; 128
    22fc:	bf e3       	ldi	r27, 0x3F	; 63
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <CLCD_voidSendFallingEdge+0x1be>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <CLCD_voidSendFallingEdge+0x1ac>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <CLCD_voidSendFallingEdge+0x1a0>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <CLCD_voidSendFallingEdge+0x1e8>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23da:	6c 96       	adiw	r28, 0x1c	; 28
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void) {
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	2e 97       	sbiw	r28, 0x0e	; 14
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(lcd_Clear);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e2       	ldi	r26, 0x20	; 32
    240c:	b1 e4       	ldi	r27, 0x41	; 65
    240e:	8b 87       	std	Y+11, r24	; 0x0b
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	ad 87       	std	Y+13, r26	; 0x0d
    2414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a ef       	ldi	r20, 0xFA	; 250
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	a9 87       	std	Y+9, r26	; 0x09
    2434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <CLCD_voidClearScreen+0xcc>
    249a:	88 ec       	ldi	r24, 0xC8	; 200
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <CLCD_voidClearScreen+0xba>
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <CLCD_voidClearScreen+0xae>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <CLCD_voidClearScreen+0xf6>
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    24ea:	2e 96       	adiw	r28, 0x0e	; 14
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <CLCD_voidSendString>:

void CLCD_voidSendString(const u8 *copy_u8ptrString) {
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <CLCD_voidSendString+0x6>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_Iterator = 0;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	0e c0       	rjmp	.+28     	; 0x252c <CLCD_voidSendString+0x30>
	while (copy_u8ptrString[Loc_Iterator] != "\0") {
		CLCD_voidSendData(copy_u8ptrString[Loc_Iterator]);
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	80 81       	ld	r24, Z
    2522:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidSendData>
		Loc_Iterator++;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	8f 5f       	subi	r24, 0xFF	; 255
    252a:	89 83       	std	Y+1, r24	; 0x01

}

void CLCD_voidSendString(const u8 *copy_u8ptrString) {
	u8 Loc_Iterator = 0;
	while (copy_u8ptrString[Loc_Iterator] != "\0") {
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	80 81       	ld	r24, Z
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	80 36       	cpi	r24, 0x60	; 96
    2546:	92 07       	cpc	r25, r18
    2548:	19 f7       	brne	.-58     	; 0x2510 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(copy_u8ptrString[Loc_Iterator]);
		Loc_Iterator++;
	}
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <CLCD_voidSetPosition>:
void CLCD_voidSetPosition(u8 Copy_u8ROW, u8 Copy_u8Column) {/*DDRAM*/
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	61 97       	sbiw	r28, 0x11	; 17
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	88 8b       	std	Y+16, r24	; 0x10
    256c:	69 8b       	std	Y+17, r22	; 0x11
	u8 LCD_u8Data;
	if (Copy_u8ROW > 2 || Copy_u8ROW < 1 || Copy_u8Column < 1
    256e:	88 89       	ldd	r24, Y+16	; 0x10
    2570:	83 30       	cpi	r24, 0x03	; 3
    2572:	48 f4       	brcc	.+18     	; 0x2586 <CLCD_voidSetPosition+0x30>
    2574:	88 89       	ldd	r24, Y+16	; 0x10
    2576:	88 23       	and	r24, r24
    2578:	31 f0       	breq	.+12     	; 0x2586 <CLCD_voidSetPosition+0x30>
    257a:	89 89       	ldd	r24, Y+17	; 0x11
    257c:	88 23       	and	r24, r24
    257e:	19 f0       	breq	.+6      	; 0x2586 <CLCD_voidSetPosition+0x30>
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	81 31       	cpi	r24, 0x11	; 17
    2584:	18 f0       	brcs	.+6      	; 0x258c <CLCD_voidSetPosition+0x36>
			|| Copy_u8Column > 16) {
		LCD_u8Data = lcd_SetCurser;
    2586:	80 e8       	ldi	r24, 0x80	; 128
    2588:	8f 87       	std	Y+15, r24	; 0x0f
    258a:	0d c0       	rjmp	.+26     	; 0x25a6 <CLCD_voidSetPosition+0x50>
	} else if (Copy_u8ROW == 1) {
    258c:	88 89       	ldd	r24, Y+16	; 0x10
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	21 f4       	brne	.+8      	; 0x259a <CLCD_voidSetPosition+0x44>
		LCD_u8Data = lcd_SetCurser + (Copy_u8Column - 1);
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	81 58       	subi	r24, 0x81	; 129
    2596:	8f 87       	std	Y+15, r24	; 0x0f
    2598:	06 c0       	rjmp	.+12     	; 0x25a6 <CLCD_voidSetPosition+0x50>
	} else if (Copy_u8ROW == 2) {
    259a:	88 89       	ldd	r24, Y+16	; 0x10
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	19 f4       	brne	.+6      	; 0x25a6 <CLCD_voidSetPosition+0x50>
		LCD_u8Data = lcd_SetCurser + 64 + (Copy_u8Column - 1);
    25a0:	89 89       	ldd	r24, Y+17	; 0x11
    25a2:	81 54       	subi	r24, 0x41	; 65
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
	}
	CLCD_voidSendCommand(LCD_u8Data);
    25a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a8:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e8       	ldi	r26, 0x80	; 128
    25b2:	bf e3       	ldi	r27, 0x3F	; 63
    25b4:	8b 87       	std	Y+11, r24	; 0x0b
    25b6:	9c 87       	std	Y+12, r25	; 0x0c
    25b8:	ad 87       	std	Y+13, r26	; 0x0d
    25ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25be:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a ef       	ldi	r20, 0xFA	; 250
    25ca:	54 e4       	ldi	r21, 0x44	; 68
    25cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8f 83       	std	Y+7, r24	; 0x07
    25d6:	98 87       	std	Y+8, r25	; 0x08
    25d8:	a9 87       	std	Y+9, r26	; 0x09
    25da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2612:	18 16       	cp	r1, r24
    2614:	4c f5       	brge	.+82     	; 0x2668 <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	6b 85       	ldd	r22, Y+11	; 0x0b
    2618:	7c 85       	ldd	r23, Y+12	; 0x0c
    261a:	8d 85       	ldd	r24, Y+13	; 0x0d
    261c:	9e 85       	ldd	r25, Y+14	; 0x0e
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	0f c0       	rjmp	.+30     	; 0x265e <CLCD_voidSetPosition+0x108>
    2640:	88 ec       	ldi	r24, 0xC8	; 200
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <CLCD_voidSetPosition+0xf6>
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f7       	brne	.-38     	; 0x2640 <CLCD_voidSetPosition+0xea>
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <CLCD_voidSetPosition+0x132>
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2690:	61 96       	adiw	r28, 0x11	; 17
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <CLCD_voidSendExternAlChar>:

void CLCD_voidSendExternAlChar(u8 Copy_u8ROW, u8 Copy_u8COLUMN){
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <CLCD_voidSendExternAlChar+0x6>
    26a8:	0f 92       	push	r0
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    26b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_Iterator =0;
    26b2:	19 82       	std	Y+1, r1	; 0x01

	CLCD_voidSendCommand(lcd_CGRAM);
    26b4:	80 e4       	ldi	r24, 0x40	; 64
    26b6:	0e 94 5f 10 	call	0x20be	; 0x20be <CLCD_voidSendCommand>

	for(Loc_Iterator =0 ; Loc_Iterator < (sizeof(CLCD_u8ExternalChars)/sizeof(CLCD_u8ExternalChars[0]));Loc_Iterator++){
    26ba:	19 82       	std	Y+1, r1	; 0x01
    26bc:	0c c0       	rjmp	.+24     	; 0x26d6 <CLCD_voidSendExternAlChar+0x34>
		CLCD_voidSendData(CLCD_u8ExternalChars[Loc_Iterator]);
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	fc 01       	movw	r30, r24
    26c6:	ec 58       	subi	r30, 0x8C	; 140
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidSendData>
void CLCD_voidSendExternAlChar(u8 Copy_u8ROW, u8 Copy_u8COLUMN){
	u8 Loc_Iterator =0;

	CLCD_voidSendCommand(lcd_CGRAM);

	for(Loc_Iterator =0 ; Loc_Iterator < (sizeof(CLCD_u8ExternalChars)/sizeof(CLCD_u8ExternalChars[0]));Loc_Iterator++){
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	80 34       	cpi	r24, 0x40	; 64
    26da:	88 f3       	brcs	.-30     	; 0x26be <CLCD_voidSendExternAlChar+0x1c>
		CLCD_voidSendData(CLCD_u8ExternalChars[Loc_Iterator]);
	}

	CLCD_voidSetPosition(Copy_u8ROW,Copy_u8COLUMN);
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	6b 81       	ldd	r22, Y+3	; 0x03
    26e0:	0e 94 ab 12 	call	0x2556	; 0x2556 <CLCD_voidSetPosition>

	for(Loc_Iterator =0 ; Loc_Iterator< 8 ; Loc_Iterator++){
    26e4:	19 82       	std	Y+1, r1	; 0x01
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <CLCD_voidSendExternAlChar+0x52>
			CLCD_voidSendData(Loc_Iterator);
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidSendData>
		CLCD_voidSendData(CLCD_u8ExternalChars[Loc_Iterator]);
	}

	CLCD_voidSetPosition(Copy_u8ROW,Copy_u8COLUMN);

	for(Loc_Iterator =0 ; Loc_Iterator< 8 ; Loc_Iterator++){
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	88 30       	cpi	r24, 0x08	; 8
    26f8:	b8 f3       	brcs	.-18     	; 0x26e8 <CLCD_voidSendExternAlChar+0x46>
			CLCD_voidSendData(Loc_Iterator);
		}

}
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <main>:
 *      Author: Ashraf AHmed Hamed
 */



int main(void){
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62



	return 0;
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
}
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <__prologue_saves__>:
    2718:	2f 92       	push	r2
    271a:	3f 92       	push	r3
    271c:	4f 92       	push	r4
    271e:	5f 92       	push	r5
    2720:	6f 92       	push	r6
    2722:	7f 92       	push	r7
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	ca 1b       	sub	r28, r26
    2742:	db 0b       	sbc	r29, r27
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	09 94       	ijmp

00002750 <__epilogue_restores__>:
    2750:	2a 88       	ldd	r2, Y+18	; 0x12
    2752:	39 88       	ldd	r3, Y+17	; 0x11
    2754:	48 88       	ldd	r4, Y+16	; 0x10
    2756:	5f 84       	ldd	r5, Y+15	; 0x0f
    2758:	6e 84       	ldd	r6, Y+14	; 0x0e
    275a:	7d 84       	ldd	r7, Y+13	; 0x0d
    275c:	8c 84       	ldd	r8, Y+12	; 0x0c
    275e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2760:	aa 84       	ldd	r10, Y+10	; 0x0a
    2762:	b9 84       	ldd	r11, Y+9	; 0x09
    2764:	c8 84       	ldd	r12, Y+8	; 0x08
    2766:	df 80       	ldd	r13, Y+7	; 0x07
    2768:	ee 80       	ldd	r14, Y+6	; 0x06
    276a:	fd 80       	ldd	r15, Y+5	; 0x05
    276c:	0c 81       	ldd	r16, Y+4	; 0x04
    276e:	1b 81       	ldd	r17, Y+3	; 0x03
    2770:	aa 81       	ldd	r26, Y+2	; 0x02
    2772:	b9 81       	ldd	r27, Y+1	; 0x01
    2774:	ce 0f       	add	r28, r30
    2776:	d1 1d       	adc	r29, r1
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	ed 01       	movw	r28, r26
    2784:	08 95       	ret

00002786 <_exit>:
    2786:	f8 94       	cli

00002788 <__stop_program>:
    2788:	ff cf       	rjmp	.-2      	; 0x2788 <__stop_program>
